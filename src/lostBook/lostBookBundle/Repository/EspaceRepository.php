<?php

namespace lostBook\lostBookBundle\Repository;

use Doctrine\ORM\EntityRepository;
use lostBook\lostBookBundle\Entity\RechercheEspaces;

/**
 * EspaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EspaceRepository extends EntityRepository
{
    public function findByVille($idVille) {
              
        
        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT e.id, e.nom FROM lostBookBundle:Espace e WHERE e.ville = :idVille");
        $query->setParameter('idVille',$idVille);
        $espaces = $query->getResult();  
        
        return $espaces;
    }
    
    public function getResultatRecherche(RechercheEspaces $recherche)
    {
        $em = $this->getEntityManager();
        if($recherche->getNom() != null)
        {
        $query = $em->createQuery("SELECT e"
                                  . " FROM lostBookBundle:Espace e "
                                  . "where e.nom like :nom");
        $query->setParameter('nom','%'.$recherche->getNom().'%');
        }
        else
        {
           $query = $em->createQuery("SELECT e,m"
                                  . " FROM lostBookBundle:Espace e "
                                  . "JOIN e.medias m"); 
        }
        $espaces = $query->getResult();             
        
        $espacesVilles = $this->getEspacesForVille($espaces, $recherche->getVille());
        $espacesDebut = $this->getEspacesForDateDebut($espacesVilles, $recherche->getDebut());
        $espacesFin = $this->getEspacesForDateFin($espacesDebut, $recherche->getFin());
        
        return $espacesFin;
        
    }
    
    public function getEspacesForVille($espaces,$ville)
    {
        if($ville != null)
        {
        $resultat = array();
        
        foreach($espaces as $next)
        {
            if($next->getVille() == $ville)
            {
                $resultat[] = $next;
            }
        }
        
        return $resultat;
        }
        else
        {
            return $espaces;
        }
    }    
        
    public function getEspacesForDateDebut($espaces,$date)
    {
        if($date != null)
        {
        $resultat = array();
        
        foreach($espaces as $next)
        {   
            
            $debut = \DateTime::createFromFormat('d/m/Y',$date);
            
            $debutFormated = \DateTime::createFromFormat('Y-m-d H:i:s',$debut->format('Y-m-d H:i:s'));
            
            if($next->getDateCreation() >= $debutFormated)
            {
                $resultat[] = $next;
            }
        }
        return $resultat;
        }
        else
        {
            return $espaces;
        }
    }
    
    public function getEspacesForDateFin($espaces,$date)
    {
        if($date != null)
        {
        $resultat = array();
        
        foreach($espaces as $next)
        {   
            
            $debut = \DateTime::createFromFormat('d/m/Y',$date);
            
            $debutFormated = \DateTime::createFromFormat('Y-m-d H:i:s',$debut->format('Y-m-d H:i:s'));
            
            if($next->getDateCreation() <= $debutFormated)
            {
                $resultat[] = $next;
            }
        }
        return $resultat;
        }
        else
        {
            return $espaces;
        }
    }
}
